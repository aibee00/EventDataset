syntax = "proto3";

import "track_pipeline_service.proto";
import "online_tracking_results.proto";

package tracking_pipeline.online;


enum ObjectType {
    OBJ_Unknown     = 0;
    OBJ_HeadCap     = 1;  // 条形帽（头罩）
    OBJ_FaceShield  = 2;  // 防护面屏（面罩）
    OBJ_FaceMask    = 3;  // 口罩
    OBJ_Glove       = 4;  // 手套
    OBJ_ProSuit     = 5;  // 防护服
    OBJ_Sanitizer   = 6;  // 洗手液
    OBJ_TrashBin    = 7;  // 垃圾桶
}


enum MetaEventType {
    DE_NULL      = 0;
    DE_Enter     = 1;  // 进事件(enter)
    DE_Exit      = 2;  // 出事件(exit)
    
    // 消毒 (DI => Disinfection)
    DE_DI_Hand   = 3;  // 手部消毒
    DE_DI_Shoe   = 4;  // 鞋底消毒

    // 穿戴装备 (WR => Wearing)
    DE_WR_FaceMask      = 5;
    DE_WR_HeadCap       = 6;
    DE_WR_ProSuit       = 7;
    DE_WR_FaceShield    = 8;
    DE_WR_Glove         = 9;

    // 脱去装备 (TO => Taking off)
    DE_TO_Glove         = 100;
    DE_TO_FaceShield    = 101;
    DE_TO_ProSuit       = 102;
    DE_TO_HeadCap       = 103;
    DE_TO_FaceMask      = 104;
}

enum AlertEventType {
    AL_NULL                 = 0;
    AL_MultiPerson          = 1; // 多人事件
    AL_Retrograde           = 2; // 逆行事件
    AL_IrregularDE          = 3; // 不规范消杀事件(Irregular disinfection event)
}

message MetaEvent {
    string event_id                  = 1;
    MetaEventType event_type         = 2;
    int64 start_time                 = 3;
    int64 end_time                   = 4;
    string track_id                  = 5;
    bool is_valid                    = 6;     
}

message EventInfo {
    string event_id                           =  1;
    string area_id                            =  2;
    string channel                            =  3;
    int64 start_time                          =  4;
    int64 end_time                            =  5;
    AlertEventType alert_event_type           =  6;
    repeated MetaEvent meta_events            =  7;
    repeated string track_ids                 =  8;
    Tracks tracks                             =  9;
    repeated MetaEventType setup_events       = 10;
}

message EventResult{
    repeated EventInfo event_infos = 1;
}

service DisinfectionEvent {
    rpc process (tracks_cameraevents) returns (PiplineResponse) {}
    rpc push_event (EventResult) returns (PiplineResponse) {}
}
