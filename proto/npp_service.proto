syntax = "proto3";

package tracking_pipeline.online;
option go_package = "./.gen";
import "common.proto";
import "online_tracking_results.proto";
import "event.proto";

service NppService {
  // Deprecated.
  rpc L0Process(L0Request) returns (L0Response);

  // Deprecated.
  rpc CustomEvtProcess(CustomEvtRequest) returns (CustomEvtResponse);

  // Deprecated.
  rpc Process(NppProcessRequest) returns (NppProcessResponse);

  rpc NppEvtProcess(NppEvtProcessRequest) returns (NppEvtProcessResponse);

  // Used in CID-based NPP (starting from Store V5.1)
  rpc NppProcess(NppProcessRequest) returns (NppProcessResponse);

  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

enum TriggerType {
  L0 = 0;
  L1 = 1;
  L2 = 2;
  L3 = 3;
  L4 = 4;
}

message NppProcessRequest {
  repeated Tracks input_tracks = 1;

  int64 start_time = 3;
  int64 end_time = 4;

  map<string, CidInfo> cid_info = 5;

  // Deprecated starting from Store V5.1
  TriggerType trigger_type = 2;

  // Next tag: 6
}

message NppProcessResponse {
  map<string, NppResult> results = 1;
  map<string, string> tpid_merge_info = 3;
  map<string, string> tpid_cid_map = 4;
  map<string, CIDPersonTypes> updated_cid_types = 6;
  // Deprecated starting from Store V5.1
  repeated OnlineEvent events = 2;
  // Deprecated starting from Store v7.2
  map<string, PersonType> tpid_person_type = 5;
  // Next tag: 7
}

message NppEvtProcessRequest {
  repeated Tracks input_tracks = 1;
  TriggerType trigger_type = 2;
  int64 start_time = 3;
  int64 end_time = 4;
  map<string, string> tpid_pid = 5;
}

message NppEvtProcessResponse {
  int64 timestamp = 1;
  map<string, NppResult> results = 2;
  repeated OnlineEvent events = 3;
  repeated RegionStatistics region_stats = 4;
  int32 total_arrival = 5;
  int32 total_departure = 6;
  int32 total_unique_arrival = 7;
  int32 total_unique_departure = 8;
}

message L0Request {
  repeated Tracks input_tracks = 1;
  int64 start_time = 2;
  int64 end_time = 3;
}

message L0Response {
  repeated OnlineEvent events = 1;
}

message CustomEvtResponse {
  repeated OnlineEvent events = 1;
}

message CustomEvtRequest {
  OnlineEventType evt_type = 1;
  int64 start_time = 2;
  int64 end_time = 3; 
}

message HealthCheckRequest {
  int64 health_check_request_time = 1;
}

message HealthCheckResponse {
  int64 start_time = 1;
  int64 end_time = 2;
}
