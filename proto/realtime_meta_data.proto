// Copyright 2019 Aibee authors.
//
// Meta Message Format
 
syntax = "proto3";

import "common.proto";
package Realtime.Meta;
 
enum AppearanceType {
    FACE = 0;
    HEAD = 1;
    BODY = 2;
    ENSEMBLE = 3; // face head body concat and
    MASK = 4;
    FG_BODY = 5; //  FG : finegrain
}
 
message Point {
    float x = 1;
    float y = 2;
}
 
message Trajectory {
    message Entity {
        Point point = 1;
        uint64 timestamp = 2;
        string floor = 3;
        repeated string channels = 4;
    }
    repeated Entity entities = 1;
}
 
message Detection {
    uint32 frame_index = 1;
    uint64 det_time = 2;
    int32 box_x = 3;
    int32 box_y = 4;
    int32 box_width = 5;
    int32 box_height = 6;
}

message Appearance {
    string model = 1;
    repeated AppearanceType appearance_types = 2;       // appearance type (face, head, body, mask)
    float quality = 3;                      // ids.quality_score
    repeated float values = 4;              // ids.features
    string patch_url = 5;                   // ids.body_url, ids.photo_url, ids.head_url
    Detection detection = 6;                // ids.face_box, ids.frame_time
    string feature_model = 7;
}

message TrackInfo {
    string track_id = 1;                  
    string channel = 2;					
    uint64 start_time = 3;
    string face_patches_url = 4;
    repeated Detection detections = 5;
    string body_patches_url = 6;
    string head_patches_url = 7;
    float track_body_quality = 8;
    uint64 end_time = 9;
    repeated Appearance appearances = 10;
    tracking_pipeline.BodyAttribute body_attrs = 11;
    Trajectory trajectory = 12;
}

message Cluster {
    string id = 1;                          // ids.face_id
    string unit_id = 2;                     // ids.tpid
    float confidence = 3;                  
    float max_track_width = 4;         
    repeated TrackInfo track_infos = 5;     // 合并的所有track      
    repeated Appearance appearances = 6;    // 包含ids需要的quality、url、特征等
    Trajectory trajectory = 7;              // ids.tracking_localizations 轨迹数据
    repeated string history_cluster_ids = 8;   // merged history clusterids
    string assign_type = 9;
}
 
message Clusters {
    repeated Cluster clusters = 1;
}
 
message Unit {
    string id = 1;
    string pid = 2;
    float score = 3;
    repeated string cluster_ids = 4;
    float confidence = 5;
    uint64 timestamp = 6;
    uint64 send_time = 7;
    string assign_type = 8;
}

 
message Units {
    repeated Unit units = 1;
}
 
message MergeInfo {
    string pid = 1;
    repeated string unit_ids = 2;
    float confidence = 3;
    uint64 merge_time = 4;
}

message Attribute {
    int32 age = 1;
    enum Gender {
        MALE = 0;
        FEMALE = 1;
    }
    enum Glass {
        GLASS = 0;
        NONGLASS = 1;
    }
    enum Race {
        ASIAN = 0;
        CAUCASIAN = 1;
        AFRICAN = 2;
        INDIAN = 3;  // yin di an ren
    }
    Race race = 2;
    Gender gender = 3;
    Glass glass = 4;
    enum StaffType {
        STAFF = 0;
        NONSTAFF = 1;
    }
    StaffType staff_type = 5;
}
 
message ClusterMatch {
    message MatchItem {
        string unit_id = 1;
        string user_id = 2;
        bool is_new_user = 3;
        int32 match_score = 4;
        string match_group_id = 5;
        Attribute attribute = 6;
        uint64 version = 7;
        string camera_id = 8;
        uint64 detection_time = 9;
        string face_image_url = 10;
        string cluster_id = 11;
        string body_image_url = 12;
        string match_image_url = 13;
    }
    repeated MatchItem match_items = 1;
    
}
 
message CameraInfo {
    map<string, float> floor_scale_map = 1;
    map<string, string> channel_floor_map = 2;
}
 
 
// 同行人
 
message Groups {
    repeated Group group = 1;
}
 
message Group {
    string unit_id = 1;
    repeated GroupPair pairs =2;
    uint64 timestamp = 3;
}
 
message GroupPair {
    string unit_id = 1;
    repeated uint64 timestamps = 2;
}
 
 
message ModifyRecord {
    message Tpid {
        string id = 1;
        uint64 create_time = 2;    // 毫秒级时间戳，后续方便轨迹（跨天）以及业务平台使用
        float score = 3;       // 先默认 100 ，后续看需求再定，该字段当前并没有真实使用
        int32 modify_version = 4;  // 对于tpid的第几次修改
    }
    string user_id = 1;
    repeated Tpid tpid_list = 2;
    Attribute attribute = 3; // 属性信息，先默认使用该用户的第一张照片信息即可
}


//Cog

message FloorCount {
    string floor = 1;
    uint64 timestamp = 2;  // unixtime ms
    uint64 count = 3;
    repeated GridCount grid_counts = 4;
}

message GridCount {
    Grid grid = 1;
    uint64 count = 2;
}

message Grid {
    uint64 x = 1; // grid left up x
    uint64 y = 2;  // grid left up y
    uint64 size = 3;  // grid size, gird is a square，min_size=1
}

// Event

enum CameraType{
    FID = 0;
    DID = 1;
}

enum AreaType {
    GATE = 0;
    STORE = 1;
}

enum EventType {
    ENTER = 0;
    EXIT = 1;
    PASS = 2;
    INVALID = -1;
}

enum MultiLinePriority {
    MAIN = 0;
    SUB = 1;
    NONE = -1;
}

enum AbnormalType {
    TrespassingEvent = 0;
    RunningEvent = 1;
    OverstayingEvent = 2;
    WanderingEvent = 3;
    ObjectLeft = 4;
    ObjectTaken = 5;
    FightingEvent = 6;
    FallingEvent = 7;
}

enum MessageType {
    person_times = 0;
    abnormal_events = 1;
    people_streams = 2;
    people_count = 3;
    region_queue = 4;
}


message Element {
    MessageType message_type = 1; //根据type来选择解析人次或异常事件，这里会确保一个element只有一种类型事件
    string version = 2;
    Events events = 3;
    AbnormalEvents abnormalEvents = 4;
    PeopleStreams peopleStreams = 5;
    PeopleCount peopleCounts = 6;
    RegionQueue reginQueue = 7;
}


message Metadata {
    int32 totalElements = 1;
    int32 totalPages = 2;
    int32 page = 3;
    int32 pageSize = 4;
    string done = 5;
}

message EventData {
    string track_id = 1;
    string uuid = 2;
    AreaType area_type = 3;
    EventType event_type = 4;
    string channel = 5;
    string id = 6;
    string floor = 7;
    string name = 8;
    uint64 start_time = 9;
    uint64 end_time = 10;
    string label_version = 11;
    MultiLinePriority priority = 12;
    string tracklet_id = 13;
    string cid = 14;
    string pid = 15;
}

message EventPair {
    string uid = 1;
    string channel = 2;
    string store_id = 3;
    uint64 enter_ts = 4;
    uint64 exit_ts = 5;
    uint64 stay_ts = 6;
    string enter_pid = 7;
    string enter_track_id = 8;
    string exit_pid = 9;
    string exit_track_id = 10;
    float sim = 11;
}

message AbnormalEvent {
    AbnormalType type = 1;
    repeated string track_ids = 2;
    string channel = 3;
    uint64 start_time = 4;
    uint64 end_time = 5;
    string floor = 6;
    string pid = 7;
    string object_id = 8;
}

message RegionQueue {
    string region_id = 1;
    string floor = 2;
    string channel = 3;
    int64  count = 4;
    int64  timestamp = 5;
}

message Events {
    repeated EventData events = 1;
}

message EventPairs {
    repeated EventPair pairs = 1;
}

message AbnormalEvents{
    repeated AbnormalEvent events = 1;
}

message PeopleStream {
    string region_id = 1;
    EventType event_type = 2;
    uint64 timestamp = 3;
    string track_id = 4;
    string channel = 5;
    Attribute.StaffType staff_type = 6;
}

message PeopleStreams {
    repeated PeopleStream peopleStreams = 1;
}

message PeopleCount {
    uint64 timestamp = 1;  // unixtime ms
    uint64 count = 2;
    repeated FloorCount floor_counts = 3;
}

message RealtimeReply {
    string request_id = 1;
    string site_id = 2;
    string version = 3;
    string dt = 4;
    string reversion = 5;
    uint64 send_time = 6;
    Metadata metadata = 7;
    repeated Element elements = 8;    
}
