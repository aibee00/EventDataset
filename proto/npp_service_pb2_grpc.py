# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import npp_service_pb2 as npp__service__pb2


class NppServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.L0Process = channel.unary_unary(
                '/tracking_pipeline.online.NppService/L0Process',
                request_serializer=npp__service__pb2.L0Request.SerializeToString,
                response_deserializer=npp__service__pb2.L0Response.FromString,
                )
        self.CustomEvtProcess = channel.unary_unary(
                '/tracking_pipeline.online.NppService/CustomEvtProcess',
                request_serializer=npp__service__pb2.CustomEvtRequest.SerializeToString,
                response_deserializer=npp__service__pb2.CustomEvtResponse.FromString,
                )
        self.Process = channel.unary_unary(
                '/tracking_pipeline.online.NppService/Process',
                request_serializer=npp__service__pb2.NppProcessRequest.SerializeToString,
                response_deserializer=npp__service__pb2.NppProcessResponse.FromString,
                )
        self.NppEvtProcess = channel.unary_unary(
                '/tracking_pipeline.online.NppService/NppEvtProcess',
                request_serializer=npp__service__pb2.NppEvtProcessRequest.SerializeToString,
                response_deserializer=npp__service__pb2.NppEvtProcessResponse.FromString,
                )
        self.NppProcess = channel.unary_unary(
                '/tracking_pipeline.online.NppService/NppProcess',
                request_serializer=npp__service__pb2.NppProcessRequest.SerializeToString,
                response_deserializer=npp__service__pb2.NppProcessResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/tracking_pipeline.online.NppService/HealthCheck',
                request_serializer=npp__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=npp__service__pb2.HealthCheckResponse.FromString,
                )


class NppServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def L0Process(self, request, context):
        """Deprecated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CustomEvtProcess(self, request, context):
        """Deprecated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Process(self, request, context):
        """Deprecated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NppEvtProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NppProcess(self, request, context):
        """Used in CID-based NPP (starting from Store V5.1)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NppServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'L0Process': grpc.unary_unary_rpc_method_handler(
                    servicer.L0Process,
                    request_deserializer=npp__service__pb2.L0Request.FromString,
                    response_serializer=npp__service__pb2.L0Response.SerializeToString,
            ),
            'CustomEvtProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.CustomEvtProcess,
                    request_deserializer=npp__service__pb2.CustomEvtRequest.FromString,
                    response_serializer=npp__service__pb2.CustomEvtResponse.SerializeToString,
            ),
            'Process': grpc.unary_unary_rpc_method_handler(
                    servicer.Process,
                    request_deserializer=npp__service__pb2.NppProcessRequest.FromString,
                    response_serializer=npp__service__pb2.NppProcessResponse.SerializeToString,
            ),
            'NppEvtProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.NppEvtProcess,
                    request_deserializer=npp__service__pb2.NppEvtProcessRequest.FromString,
                    response_serializer=npp__service__pb2.NppEvtProcessResponse.SerializeToString,
            ),
            'NppProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.NppProcess,
                    request_deserializer=npp__service__pb2.NppProcessRequest.FromString,
                    response_serializer=npp__service__pb2.NppProcessResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=npp__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=npp__service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tracking_pipeline.online.NppService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NppService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def L0Process(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking_pipeline.online.NppService/L0Process',
            npp__service__pb2.L0Request.SerializeToString,
            npp__service__pb2.L0Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CustomEvtProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking_pipeline.online.NppService/CustomEvtProcess',
            npp__service__pb2.CustomEvtRequest.SerializeToString,
            npp__service__pb2.CustomEvtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Process(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking_pipeline.online.NppService/Process',
            npp__service__pb2.NppProcessRequest.SerializeToString,
            npp__service__pb2.NppProcessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NppEvtProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking_pipeline.online.NppService/NppEvtProcess',
            npp__service__pb2.NppEvtProcessRequest.SerializeToString,
            npp__service__pb2.NppEvtProcessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NppProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking_pipeline.online.NppService/NppProcess',
            npp__service__pb2.NppProcessRequest.SerializeToString,
            npp__service__pb2.NppProcessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking_pipeline.online.NppService/HealthCheck',
            npp__service__pb2.HealthCheckRequest.SerializeToString,
            npp__service__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
